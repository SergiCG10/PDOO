var search_data = {"index":{"searchIndex":["dice","directions","game","gamecharacter","gamestate","labyrinth","monster","orientations","player","shield","weapon","addmonster()","attack()","attack()","attack()","configurelabyrinth()","dead()","dead()","defend()","defensiveenergy()","discard()","discard()","discardelement()","finished()","getcol()","getcurrentplayer()","getgamestate()","getlabyrinth()","getlog()","getmonsters()","getnumber()","getplayers()","getrow()","getwinner()","gotwounded()","haveawinner()","healthreward()","incconsecutivehits()","intensity()","logmonsterwon()","lognomonster()","logplayernoorders()","logplayerskipturn()","logplayerwon()","logresurrected()","logrounds()","managehit()","new()","new()","new()","new()","new()","new()","new()","newshield()","newweapon()","nextplayer()","protect()","randomintelligence()","randompos()","randomstrength()","resethits()","resurrect()","resurrectplayer()","setpos()","setpos()","shieldpower()","shieldsreward()","sumshields()","sumweapons()","tostring()","to_s()","to_s()","to_s()","to_s()","usesleft()","weaponpower()","weaponsreward()","whostarts()"],"longSearchIndex":["dice","directions","game","gamecharacter","gamestate","labyrinth","monster","orientations","player","shield","weapon","labyrinth#addmonster()","monster#attack()","player#attack()","weapon#attack()","game#configurelabyrinth()","monster#dead()","player#dead()","player#defend()","player#defensiveenergy()","shield#discard()","weapon#discard()","dice::discardelement()","game#finished()","player#getcol()","gamestate#getcurrentplayer()","game#getgamestate()","gamestate#getlabyrinth()","gamestate#getlog()","gamestate#getmonsters()","player#getnumber()","gamestate#getplayers()","player#getrow()","gamestate#getwinner()","player#gotwounded()","labyrinth#haveawinner()","dice::healthreward()","player#incconsecutivehits()","dice::intensity()","game#logmonsterwon()","game#lognomonster()","game#logplayernoorders()","game#logplayerskipturn()","game#logplayerwon()","game#logresurrected()","game#logrounds()","player#managehit()","game::new()","gamestate::new()","labyrinth::new()","monster::new()","player::new()","shield::new()","weapon::new()","player#newshield()","player#newweapon()","game#nextplayer()","shield#protect()","dice::randomintelligence()","dice::randompos()","dice::randomstrength()","player#resethits()","player#resurrect()","dice::resurrectplayer()","monster#setpos()","player#setpos()","dice::shieldpower()","dice::shieldsreward()","player#sumshields()","player#sumweapons()","player#tostring()","labyrinth#to_s()","monster#to_s()","shield#to_s()","weapon#to_s()","dice::usesleft()","dice::weaponpower()","dice::weaponsreward()","dice::whostarts()"],"info":[["Dice","","Dice.html","","<p>@author Sergio Calvo González correo e.sergiocg10@go.ugr.es\n"],["Directions","","Directions.html","","<p>Enumerado Directions Valores posibles:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">LEFT</span>\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">RIGHT</span>\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">UP</span>\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">DOWN</span>\n</pre>\n"],["Game","","Game.html","",""],["GameCharacter","","GameCharacter.html","","<p>Enumerado GameCharacter Valores posibles:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">PLAYER</span>\n<span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">MONSTER</span>\n</pre>\n"],["GameState","","GameState.html","","<p>@author Sergio Calvo González correo e.sergiocg10@go.ugr.es\n"],["Labyrinth","","Labyrinth.html","","<p>Clase Labyrinth. Implementación de la clase Labyrinth, de sus métodos y variables.\n<p>@author Miguel Ángel …\n"],["Monster","","Monster.html","","<p>@author Sergio Calvo González correo e.sergiocg10@go.ugr.es\n"],["Orientations","","Orientations.html","","<p>Enumerado Orientation. Implementación del enumerado Orientation. Valores posibles:\n<p>VERTICAL\n<p>HORIZONTAL …\n"],["Player","","Player.html","",""],["Shield","","Shield.html","","<p>Clase Shield. Implementación de la clase Shield, de sus métodos y variables.\n<p>@author Miguel Ángel Luque …\n"],["Weapon","","Weapon.html","","<p>Clase Weapon. Implementación de la clase Weapon, de sus métodos y variables.\n<p>@author Miguel Ángel Luque …\n"],["addMonster","Labyrinth","Labyrinth.html#method-i-addMonster","(row, col, monster)",""],["attack","Monster","Monster.html#method-i-attack","()",""],["attack","Player","Player.html#method-i-attack","()","<p>Funcion attack. Devuelve el valor de ataque del jugador, calculandolo como la suma del ataque de sus …\n"],["attack","Weapon","Weapon.html#method-i-attack","()","<p>Función Attack. Devuelve el valor de daño del arma y decrementa su uso en uno @return Valor de ataque. …\n"],["configureLabyrinth","Game","Game.html#method-i-configureLabyrinth","()",""],["dead","Monster","Monster.html#method-i-dead","()",""],["dead","Player","Player.html#method-i-dead","()","<p>Funcion dead. Devuelve si el jugador está o no muerto\n<p>@return true si está muerto, false si no\n"],["defend","Player","Player.html#method-i-defend","(receivedAttack)","<p>Funcion defend. Devuelve si el jugador se defiende del ataque @param receivedAttack Cantidad de daño …\n"],["defensiveEnergy","Player","Player.html#method-i-defensiveEnergy","()","<p>Funcion defensiveEnergy. Devuelve el valor de defensa del jugador, calculandolo como la suma de la denfesa …\n"],["discard","Shield","Shield.html#method-i-discard","()","<p>Funcion discard. Devuelve si se debe de descartar el escudo. @return True si se descarta, false si no. …\n"],["discard","Weapon","Weapon.html#method-i-discard","()","<p>Funcion discard. Devuelve si se debe de descartar el arma. @return True si se descarta, false si no. …\n"],["discardElement","Dice","Dice.html#method-c-discardElement","(usesLeft)","<p>Funcion discardElement. Muestra true si se debe de descartar o no un objeto.  Se calcula si se decarta …\n"],["finished","Game","Game.html#method-i-finished","()",""],["getCol","Player","Player.html#method-i-getCol","()","<p>Funcion getCol. Devuelve la columna en la que se encuentra el jugador\n<p>@return Número de columna del jugador …\n"],["getCurrentPlayer","GameState","GameState.html#method-i-getCurrentPlayer","()","<p>Método obtención currentPlayer clase GameState\n"],["getGameState","Game","Game.html#method-i-getGameState","()",""],["getLabyrinth","GameState","GameState.html#method-i-getLabyrinth","()","<p>Método obtención labyrinth clase GameState\n"],["getLog","GameState","GameState.html#method-i-getLog","()","<p>Método obtención log clase GameState\n"],["getMonsters","GameState","GameState.html#method-i-getMonsters","()","<p>Método obtención monsters clase GameState\n"],["getNumber","Player","Player.html#method-i-getNumber","()","<p>Funcion getNumber. Devuelve el número del jugador\n<p>@return Número del jugador\n"],["getPlayers","GameState","GameState.html#method-i-getPlayers","()","<p>Método obtención players clase GameState\n"],["getRow","Player","Player.html#method-i-getRow","()","<p>Funcion getRow. Devuelve la fila en la que se encuentra el jugador\n<p>@return Número de fila del jugador …\n"],["getWinner","GameState","GameState.html#method-i-getWinner","()","<p>Método obtención winner clase GameState\n"],["gotWounded","Player","Player.html#method-i-gotWounded","()","<p>Funcion gotWounded. Resta uno de vida al jugador\n"],["haveAWinner","Labyrinth","Labyrinth.html#method-i-haveAWinner","()","<p>end\n"],["healthReward","Dice","Dice.html#method-c-healthReward","()","<p>Funcion healthReward. Devuelve el número aleatorio de vidas que recibe como recompensa @return Valor …\n"],["incConsecutiveHits","Player","Player.html#method-i-incConsecutiveHits","()","<p>Funcion incConsecutiveHits. Incrementa el número de golpes consecutivos recibidos por el jugador\n"],["intensity","Dice","Dice.html#method-c-intensity","(competence)","<p>Funcion intensity. Devuelve un valor aleatorio que muestra el grado de intensidad de una acción @param …\n"],["logMonsterWon","Game","Game.html#method-i-logMonsterWon","()",""],["logNoMonster","Game","Game.html#method-i-logNoMonster","()",""],["logPlayerNoOrders","Game","Game.html#method-i-logPlayerNoOrders","()",""],["logPlayerSkipTurn","Game","Game.html#method-i-logPlayerSkipTurn","()",""],["logPlayerWon","Game","Game.html#method-i-logPlayerWon","()",""],["logResurrected","Game","Game.html#method-i-logResurrected","()",""],["logRounds","Game","Game.html#method-i-logRounds","(rounds, max)",""],["manageHit","Player","Player.html#method-i-manageHit","(receivedAttack)","<p>Implementación P3\n"],["new","Game","Game.html#method-c-new","(nplayers)",""],["new","GameState","GameState.html#method-c-new","(lab, pl, monst, cp, w, l)","<p>Constructor de la clase GameState\n"],["new","Labyrinth","Labyrinth.html#method-c-new","(rows, cols, eRow, eCol)",""],["new","Monster","Monster.html#method-c-new","(name, howsmart, howstrong)",""],["new","Player","Player.html#method-c-new","(nmb, howsmart, howstrong)","<p>Constructor por parámetro de la clase Player.\n<p>@param nmb Número del jugador @param howsmart Cómo de inteligente …\n"],["new","Shield","Shield.html#method-c-new","(pr, u)","<p>Constructor por parámetro de la clase Shield @param p defensa del escudo a crear @param us usos del escudo …\n"],["new","Weapon","Weapon.html#method-c-new","(pw, u)","<p>Constructor por parámetro de la clase Weapon @param p daño del arma a crear @param us usos del arma a …\n"],["newShield","Player","Player.html#method-i-newShield","()","<p>Funcion newShield. Crea y devuelve un nueva escudo con parámetros aleatorios @return escudo creado con …\n"],["newWeapon","Player","Player.html#method-i-newWeapon","()","<p>Funcion newWeapon. Crea y devuelve una nueva arma con parámetros aleatorios @return arma creada con parámetros …\n"],["nextPlayer","Game","Game.html#method-i-nextPlayer","()",""],["protect","Shield","Shield.html#method-i-protect","()","<p>Función Protect. Devuelve el valor de defensa del escudo y decrementa su uso en uno @return Valor de …\n"],["randomIntelligence","Dice","Dice.html#method-c-randomIntelligence","()","<p>Funcion randomIntelligence. Devuelve un valor aleatorio que mostrará  la inteligencia del personaje @return …\n"],["randomPos","Dice","Dice.html#method-c-randomPos","(max)","<p>Funcion randomPos. Devuelve un valor que muestra el valor de fila o  de columna donde empezará el jugador …\n"],["randomStrength","Dice","Dice.html#method-c-randomStrength","()","<p>Funcion randomStrength. Devuelve en valor aleatorio que mostrará  la fuerza del personaje @return Un …\n"],["resetHits","Player","Player.html#method-i-resetHits","()","<p>Funcion resetHits. Resetea el número de golpes recibidos por el jugador\n"],["resurrect","Player","Player.html#method-i-resurrect","()","<p>Funcion resurrect. Resucita al jugador, perdiendo las armas y escudos  que poseía y recuperando la salud …\n"],["resurrectPlayer","Dice","Dice.html#method-c-resurrectPlayer","()","<p>Funcion resurrectPlayer. Devuelve si el personaje debe de revivir. La probabilidad se calcula de forma …\n"],["setPos","Monster","Monster.html#method-i-setPos","(r, c)","<p>end\n"],["setPos","Player","Player.html#method-i-setPos","(r,c)","<p>Funcion setPos. Establece la posición del jugador\n<p>@param r Número de fila @param c Número de columna\n"],["shieldPower","Dice","Dice.html#method-c-shieldPower","()","<p>Funcion weaponPower. Devuelve un valor que representará el valor de defensa de un escudo @return Valor …\n"],["shieldsReward","Dice","Dice.html#method-c-shieldsReward","()","<p>Funcion shieldsReward. Devuelve el número aleatorio de escudos que recibe como recompensa @return Valor …\n"],["sumShields","Player","Player.html#method-i-sumShields","()","<p>Funcion sumShields. Devuelve el valor de defensa total de todos los escudos del jugador También se decrementa …\n"],["sumWeapons","Player","Player.html#method-i-sumWeapons","()","<p>Funcion sumWeapons. Devuelve el valor de ataque total de todas las armas del jugador También se decrementa …\n"],["toString","Player","Player.html#method-i-toString","()","<p>Funcion toString. Devuelve la información del jugador, su vida, inteligencia, fuerza y la infomación …\n"],["to_s","Labyrinth","Labyrinth.html#method-i-to_s","()",""],["to_s","Monster","Monster.html#method-i-to_s","()",""],["to_s","Shield","Shield.html#method-i-to_s","()","<p>Funcion toString de la clase Shield. Muestra los valores de la clase en un string en el formato [protection, …\n"],["to_s","Weapon","Weapon.html#method-i-to_s","()","<p>Funcion toString de la clase Weapon. Muestra los valores de la clase en un string en el formato [power, …\n"],["usesLeft","Dice","Dice.html#method-c-usesLeft","()","<p>Funcion usesLeft. Devuelve el número aleatorio de usos restantes de un arma o escudo @return Número entero …\n"],["weaponPower","Dice","Dice.html#method-c-weaponPower","()","<p>Funcion weaponPower. Devuelve un valor que representará el valor de daño de un arma @return Valor con …\n"],["weaponsReward","Dice","Dice.html#method-c-weaponsReward","()","<p>Funcion weaponsReward. Devuelve el número aleatorio de armas que recibe como recompensa @return Valor …\n"],["whoStarts","Dice","Dice.html#method-c-whoStarts","(nPlayers)","<p>Funcion whoStars. Devuelve un número que muestra que jugador empieza. @param nplayers Número de jugadores …\n"]]}}